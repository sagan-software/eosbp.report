// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var partial_arg = (/\B(?=(\d{3})+(?!\d))/g);

function formatNumberString(param) {
  return param.replace(partial_arg, ",");
}

function formatInt($$int) {
  return formatNumberString($$int.toString());
}

function decodeJsonAsResult(decoder, json) {
  var exit = 0;
  var decoded;
  try {
    decoded = Curry._1(decoder, json);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [decoded]);
  }
  
}

function parseJsonAsPromise(text) {
  var exit = 0;
  var parsed;
  try {
    parsed = JSON.parse(text);
    exit = 1;
  }
  catch (raw_error){
    return Promise.reject(Js_exn.internalToOCamlException(raw_error));
  }
  if (exit === 1) {
    return Promise.resolve(parsed);
  }
  
}

function decodeJsonAsPromise(decode, json) {
  var exit = 0;
  var decoded;
  try {
    decoded = Curry._1(decode, json);
    exit = 1;
  }
  catch (raw_error){
    return Promise.reject(Js_exn.internalToOCamlException(raw_error));
  }
  if (exit === 1) {
    return Promise.resolve(decoded);
  }
  
}

function parseAndDecodeAsPromise(decode, text) {
  return parseJsonAsPromise(text).then((function (param) {
                return decodeJsonAsPromise(decode, param);
              }));
}

function promiseToOption(promise) {
  return promise.then((function (result) {
                  return Promise.resolve(Js_primitive.some(result));
                })).catch((function () {
                return Promise.resolve(undefined);
              }));
}

function promiseToResult(promise) {
  return promise.then((function (result) {
                  return Promise.resolve(/* Ok */Block.__(0, [result]));
                })).catch((function (error) {
                return Promise.resolve(/* Error */Block.__(1, [error]));
              }));
}

function onlySome(array) {
  return Belt_Array.reduce(array, /* array */[], (function (results, item) {
                if (item !== undefined) {
                  results.push(Js_primitive.valFromOption(item));
                }
                return results;
              }));
}

function onlyOk(array) {
  return Belt_Array.reduce(array, /* array */[], (function (results, item) {
                if (!item.tag) {
                  results.push(item[0]);
                }
                return results;
              }));
}

function chunkArray(originalArr, chunkSize) {
  var results = /* array */[];
  var arr = originalArr.slice(0);
  while(arr.length > 0) {
    var chunk = arr.splice(0, chunkSize);
    results.push(chunk);
  };
  return results;
}

function chunkArrayPromises(arr, fn, chunkSize) {
  return chunkArray(arr, chunkSize).reduce((function (promise, chunk) {
                return promise.then((function (allResults) {
                              return Promise.all(chunk.map(Curry.__1(fn))).then((function (results) {
                                            return Promise.resolve(results.concat(allResults));
                                          }));
                            }));
              }), Promise.resolve(/* array */[]));
}

function doNothing(thing) {
  return thing;
}

function timeoutPromise(ms) {
  return new Promise((function (resolve, _) {
                setTimeout((function () {
                        return resolve(1);
                      }), ms);
                return /* () */0;
              }));
}

exports.formatNumberString = formatNumberString;
exports.formatInt = formatInt;
exports.decodeJsonAsResult = decodeJsonAsResult;
exports.parseJsonAsPromise = parseJsonAsPromise;
exports.decodeJsonAsPromise = decodeJsonAsPromise;
exports.parseAndDecodeAsPromise = parseAndDecodeAsPromise;
exports.promiseToOption = promiseToOption;
exports.promiseToResult = promiseToResult;
exports.onlySome = onlySome;
exports.onlyOk = onlyOk;
exports.chunkArray = chunkArray;
exports.chunkArrayPromises = chunkArrayPromises;
exports.doNothing = doNothing;
exports.timeoutPromise = timeoutPromise;
/* partial_arg Not a pure module */
