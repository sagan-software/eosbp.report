// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function decode(j) {
  var partial_arg = Json_decode.either(Json_decode.$$float, (function (param) {
          return Json_decode.map(Caml_format.caml_float_of_string, Json_decode.string, param);
        }));
  return /* record */[
          /* owner */Json_decode.field("owner", Json_decode.string, j),
          /* totalVotes */Json_decode.field("total_votes", Json_decode.string, j),
          /* producerKey */Json_decode.field("producer_key", Json_decode.string, j),
          /* isActive */Json_decode.field("is_active", (function (param) {
                  return Json_decode.map((function (x) {
                                return x === 1;
                              }), Json_decode.$$int, param);
                }), j),
          /* url */Json_decode.field("url", Json_decode.string, j),
          /* unpaidBlocks */Json_decode.field("unpaid_blocks", Json_decode.$$int, j),
          /* lastClaimTime */Json_decode.field("last_claim_time", (function (param) {
                  return Json_decode.map((function (us) {
                                return new Date(us / 1000);
                              }), partial_arg, param);
                }), j),
          /* location */Json_decode.field("location", Json_decode.$$int, j)
        ];
}

function encode(d) {
  var match = d[/* isActive */3];
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "owner",
                d[/* owner */0]
              ],
              /* :: */[
                /* tuple */[
                  "total_votes",
                  d[/* totalVotes */1]
                ],
                /* :: */[
                  /* tuple */[
                    "producer_key",
                    d[/* producerKey */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      "is_active",
                      match ? 1 : 0
                    ],
                    /* :: */[
                      /* tuple */[
                        "url",
                        d[/* url */4]
                      ],
                      /* :: */[
                        /* tuple */[
                          "unpaid_blocks",
                          d[/* unpaidBlocks */5]
                        ],
                        /* :: */[
                          /* tuple */[
                            "last_claim_time",
                            d[/* lastClaimTime */6].getTime() * 1000 | 0
                          ],
                          /* :: */[
                            /* tuple */[
                              "location",
                              d[/* location */7]
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function jsonUrl(t) {
  var url = t[/* url */4];
  var url$1 = url.replace((/^[^\x00-\x7F]/g), "").replace((/[^\x00-\x7F]$/g), "").replace((/\/$/g), "");
  var match = url$1.startsWith("http") || url$1.startsWith("https");
  var url$2 = match ? url$1 : "http://" + url$1;
  var match$1 = url$2.endsWith(".json");
  if (match$1) {
    return url$2;
  } else {
    return url$2 + "/bp.json";
  }
}

var Row = /* module */[
  /* decode */decode,
  /* encode */encode,
  /* jsonUrl */jsonUrl
];

function decode$1(j) {
  return /* record */[
          /* rows */Json_decode.field("rows", (function (param) {
                  return Json_decode.array(decode, param);
                }), j),
          /* more */Json_decode.field("more", Json_decode.bool, j)
        ];
}

var headers = {
  "Content-Type": "application/json",
  Origin: "http://eosbpdotjson.io",
  Referer: "http://eosbpdotjson.io",
  "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36"
};

function fetch$1(httpEndpoint, $staropt$star, _) {
  var headers$1 = $staropt$star !== undefined ? Js_primitive.valFromOption($staropt$star) : headers;
  var payload = Json.stringify(Json_encode.object_(/* :: */[
            /* tuple */[
              "scope",
              "eosio"
            ],
            /* :: */[
              /* tuple */[
                "code",
                "eosio"
              ],
              /* :: */[
                /* tuple */[
                  "table",
                  "producers"
                ],
                /* :: */[
                  /* tuple */[
                    "json",
                    true
                  ],
                  /* :: */[
                    /* tuple */[
                      "limit",
                      5000
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]));
  var options = Fetch.RequestInit[/* make */0](/* Post */2, Js_primitive.some(headers$1), Js_primitive.some(payload), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0);
  var url = "" + (String(httpEndpoint) + "/v1/chain/get_table_rows");
  return fetch(url, options).then((function (prim) {
                    return prim.json();
                  })).then((function (j) {
                  console.log("got JSON", j);
                  return Promise.resolve(Json_decode.field("rows", (function (param) {
                                    return Json_decode.array(decode, param);
                                  }), j));
                })).catch((function (e) {
                console.log("error fetching producers table JSON:", e);
                return Promise.resolve(/* array */[]);
              }));
}

exports.Row = Row;
exports.decode = decode$1;
exports.headers = headers;
exports.fetch = fetch$1;
/* Json_encode Not a pure module */
