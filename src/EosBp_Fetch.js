// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Url = require("url");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Json5 = require("json5");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Xhr$ReactTemplate = require("./Xhr.js");
var EosBp_Json$ReactTemplate = require("./EosBp_Json.js");
var EosBp_Table$ReactTemplate = require("./EosBp_Table.js");

function parseJson(url, res, text) {
  var exit = 0;
  var json;
  try {
    json = JSON.parse(text);
    exit = 1;
  }
  catch (_error){
    var exit$1 = 0;
    var json$1;
    try {
      json$1 = Json5.parse(text);
      exit$1 = 2;
    }
    catch (_error$1){
      return /* InvalidJson */Block.__(2, [
                url,
                res,
                text
              ]);
    }
    if (exit$1 === 2) {
      return /* ValidJson5 */Block.__(1, [
                url,
                res,
                json$1
              ]);
    }
    
  }
  if (exit === 1) {
    return /* ValidJson4 */Block.__(0, [
              url,
              res,
              json
            ]);
  }
  
}

function mapJson(fn, response) {
  switch (response.tag | 0) {
    case 0 : 
        return /* ValidJson4 */Block.__(0, [
                  response[0],
                  response[1],
                  Curry._1(fn, response[2])
                ]);
    case 1 : 
        return /* ValidJson5 */Block.__(1, [
                  response[0],
                  response[1],
                  Curry._1(fn, response[2])
                ]);
    case 2 : 
        return /* InvalidJson */Block.__(2, [
                  response[0],
                  response[1],
                  response[2]
                ]);
    case 3 : 
        return /* BadResponse */Block.__(3, [
                  response[0],
                  response[1]
                ]);
    case 4 : 
        return /* BadUrl */Block.__(4, [response[0]]);
    case 5 : 
        return /* TimedOut */Block.__(5, [
                  response[0],
                  response[1]
                ]);
    case 6 : 
        return /* Unreachable */Block.__(6, [
                  response[0],
                  response[1]
                ]);
    case 7 : 
        return /* UnknownError */Block.__(7, [
                  response[0],
                  response[1]
                ]);
    
  }
}

function getData(response) {
  switch (response.tag | 0) {
    case 0 : 
    case 1 : 
        return Js_primitive.some(response[2]);
    default:
      return undefined;
  }
}

var Response = /* module */[
  /* parseJson */parseJson,
  /* mapJson */mapJson,
  /* getData */getData
];

var headers = /* :: */[
  /* tuple */[
    "Content-Type",
    "application/json"
  ],
  /* [] */0
];

function fetchWithUrl(url, $staropt$star, $staropt$star$1, $staropt$star$2, $staropt$star$3, _) {
  var method__ = $staropt$star !== undefined ? $staropt$star : /* GET */3546230;
  var headers$1 = $staropt$star$1 !== undefined ? $staropt$star$1 : headers;
  var body = $staropt$star$2 !== undefined ? Js_primitive.valFromOption($staropt$star$2) : undefined;
  var timeout = $staropt$star$3 !== undefined ? $staropt$star$3 : 15000;
  return new Promise((function (resolve, _) {
                var urlStr = url.toString();
                var xhr = Xhr$ReactTemplate.make(method__, urlStr);
                Xhr$ReactTemplate.setRequestHeaders(xhr, headers$1);
                xhr.timeout = timeout;
                var timeoutId = setTimeout((function () {
                        return resolve(/* TimedOut */Block.__(5, [
                                      urlStr,
                                      xhr
                                    ]));
                      }), timeout);
                var clearAndResolve = function (response) {
                  clearTimeout(timeoutId);
                  return resolve(response);
                };
                xhr.onload = (function () {
                    var match = xhr.responseText;
                    return clearAndResolve((match == null) ? /* UnknownError */Block.__(7, [
                                    urlStr,
                                    ""
                                  ]) : parseJson(urlStr, xhr, match));
                  });
                xhr.ontimeout = (function () {
                    return clearAndResolve(/* TimedOut */Block.__(5, [
                                  urlStr,
                                  xhr
                                ]));
                  });
                xhr.onabort = (function () {
                    return clearAndResolve(/* TimedOut */Block.__(5, [
                                  urlStr,
                                  xhr
                                ]));
                  });
                xhr.onerror = (function (error) {
                    return clearAndResolve(/* UnknownError */Block.__(7, [
                                  urlStr,
                                  error
                                ]));
                  });
                if (body !== undefined) {
                  return Xhr$ReactTemplate.sendJson(xhr, Js_primitive.valFromOption(body));
                } else {
                  xhr.send();
                  return /* () */0;
                }
              }));
}

function fetchWithBase(baseUrl, path, method__, headers, body, timeout, _) {
  var exit = 0;
  var url;
  try {
    url = new Url.URL(path, baseUrl);
    exit = 1;
  }
  catch (_error){
    return Promise.resolve(/* BadUrl */Block.__(4, [baseUrl]));
  }
  if (exit === 1) {
    return fetchWithUrl(url, method__, headers, body, timeout, /* () */0);
  }
  
}

function fetch(url, method__, headers, body, timeout, _) {
  var exit = 0;
  var url$1;
  try {
    url$1 = new Url.URL(url);
    exit = 1;
  }
  catch (_error){
    return Promise.resolve(/* BadUrl */Block.__(4, [url]));
  }
  if (exit === 1) {
    return fetchWithUrl(url$1, method__, headers, body, timeout, /* () */0);
  }
  
}

function thenDecode(decoder, promise) {
  return promise.then((function (response) {
                  return Promise.resolve(mapJson(Curry.__1(decoder), response));
                })).catch((function (e) {
                console.error("error decoding JSON", e);
                return Promise.resolve(/* UnknownError */Block.__(7, [
                              "",
                              "error decoding JSON"
                            ]));
              }));
}

function tableRowsRaw(httpEndpoint, headers, _) {
  var body = Js_primitive.some(Json_encode.object_(/* :: */[
            /* tuple */[
              "scope",
              "eosio"
            ],
            /* :: */[
              /* tuple */[
                "code",
                "eosio"
              ],
              /* :: */[
                /* tuple */[
                  "table",
                  "producers"
                ],
                /* :: */[
                  /* tuple */[
                    "json",
                    true
                  ],
                  /* :: */[
                    /* tuple */[
                      "limit",
                      5000
                    ],
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]));
  return fetchWithBase(httpEndpoint, "/v1/chain/get_table_rows", /* POST */891112544, headers, Js_primitive.some(body), undefined, /* () */0);
}

function tableRows(httpEndpoint, headers, _) {
  return thenDecode(EosBp_Table$ReactTemplate.decode, tableRowsRaw(httpEndpoint, headers, /* () */0));
}

function bpJsonRaw(row, headers, _) {
  var match = row[/* url */4].replace((/\W/g), "").trim().length > 0;
  if (match) {
    var url = EosBp_Table$ReactTemplate.Row[/* jsonUrl */2](row);
    return fetch(url, undefined, headers, undefined, undefined, /* () */0);
  } else {
    return Promise.resolve(/* BadUrl */Block.__(4, [row[/* url */4]]));
  }
}

function bpJson(row, headers, _) {
  return thenDecode(EosBp_Json$ReactTemplate.decode, bpJsonRaw(row, headers, /* () */0));
}

exports.Response = Response;
exports.headers = headers;
exports.fetchWithUrl = fetchWithUrl;
exports.fetchWithBase = fetchWithBase;
exports.fetch = fetch;
exports.thenDecode = thenDecode;
exports.tableRowsRaw = tableRowsRaw;
exports.tableRows = tableRows;
exports.bpJsonRaw = bpJsonRaw;
exports.bpJson = bpJson;
/* url Not a pure module */
