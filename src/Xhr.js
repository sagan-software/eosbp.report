// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Js_list = require("bs-platform/lib/js/js_list.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -539883714,
    "OPTIONS"
  ],
  /* tuple */[
    3546230,
    "GET"
  ],
  /* tuple */[
    3997359,
    "PUT"
  ],
  /* tuple */[
    336447077,
    "TRACE"
  ],
  /* tuple */[
    357830602,
    "CONNECT"
  ],
  /* tuple */[
    492530731,
    "DELETE"
  ],
  /* tuple */[
    801894688,
    "HEAD"
  ],
  /* tuple */[
    891112544,
    "POST"
  ],
  /* tuple */[
    994393768,
    "PATCH"
  ]
];

function methodToJs(param) {
  return Js_mapperRt.binarySearch(9, param, jsMapperConstantArray);
}

function methodFromJs(param) {
  return Js_mapperRt.revSearch(9, jsMapperConstantArray, param);
}

function readyStateToJs(param) {
  return param + 0 | 0;
}

function readyStateFromJs(param) {
  if (param <= 4 && 0 <= param) {
    return param - 0 | 0;
  }
  
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    -1055310499,
    "blob"
  ],
  /* tuple */[
    -966245848,
    "json"
  ],
  /* tuple */[
    -856044371,
    "text"
  ],
  /* tuple */[
    155706201,
    "arraybuffer"
  ],
  /* tuple */[
    454225691,
    "document"
  ]
];

function responseTypeToJs(param) {
  return Js_mapperRt.binarySearch(5, param, jsMapperConstantArray$1);
}

function responseTypeFromJs(param) {
  return Js_mapperRt.revSearch(5, jsMapperConstantArray$1, param);
}

function make(method_, url) {
  var xhr = new XMLHttpRequest();
  xhr.open(methodToJs(method_), url);
  return xhr;
}

function sendJson(t, json) {
  t.send(JSON.stringify(json));
  return /* () */0;
}

function setRequestHeaders(t, headers) {
  return Js_list.iter((function (param) {
                t.setRequestHeader(param[0], param[1]);
                return /* () */0;
              }), headers);
}

function getReadyState(t) {
  return readyStateFromJs(t.readyState);
}

function setResponseType(t, r) {
  t.responseType = responseTypeToJs(r);
  return /* () */0;
}

exports.methodToJs = methodToJs;
exports.methodFromJs = methodFromJs;
exports.readyStateToJs = readyStateToJs;
exports.readyStateFromJs = readyStateFromJs;
exports.responseTypeToJs = responseTypeToJs;
exports.responseTypeFromJs = responseTypeFromJs;
exports.make = make;
exports.sendJson = sendJson;
exports.setRequestHeaders = setRequestHeaders;
exports.getReadyState = getReadyState;
exports.setResponseType = setResponseType;
/* No side effect */
