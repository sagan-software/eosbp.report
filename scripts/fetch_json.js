// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Mkdirp = require("mkdirp");
var Npmlog = require("npmlog");
var Process = require("process");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Env$ReactTemplate = require("../src/Env.js");
var EosBp_Fetch$ReactTemplate = require("../src/EosBp_Fetch.js");

((global.XMLHttpRequest = require('xhr2').XMLHttpRequest));

((process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'));

var httpEndpoint = "http://node2.liquideos.com";

function writeBpJson(row, xhr, json) {
  var dirname = Path.join(Env$ReactTemplate.buildDir, row[/* owner */0]);
  var text = Js_option.getWithDefault("", Js_primitive.nullable_to_opt(xhr.responseText));
  Mkdirp.sync(dirname);
  Fs.writeFileSync(Path.join(dirname, "bp-raw.json"), text, "utf8");
  Fs.writeFileSync(Path.join(dirname, "bp.json"), JSON.stringify(json, null, 2), "utf8");
  Npmlog.info("write bp.json", "wrote files", Path.relative(Process.cwd(), dirname));
  return Promise.resolve(/* () */0);
}

function fetchBpJson(row) {
  return EosBp_Fetch$ReactTemplate.bpJsonRaw(row, undefined, /* () */0).then((function (result) {
                var label = "fetch bp.json";
                var metadata = function (url, xhr) {
                  return {
                          producer: row[/* owner */0],
                          row_url: row[/* url */4],
                          request_url: url,
                          response_url: Js_primitive.nullable_to_opt(xhr.responseURL),
                          response_type: Js_primitive.nullable_to_opt(xhr.getResponseHeader("Content-Type"))
                        };
                };
                switch (result.tag | 0) {
                  case 0 : 
                      var xhr = result[1];
                      Npmlog.info(label, "Valid JSON4", metadata(result[0], xhr));
                      return Promise.resolve(/* tuple */[
                                  row,
                                  xhr,
                                  result[2]
                                ]);
                  case 1 : 
                      var xhr$1 = result[1];
                      Npmlog.warn(label, "Valid JSON5", metadata(result[0], xhr$1));
                      return Promise.resolve(/* tuple */[
                                  row,
                                  xhr$1,
                                  result[2]
                                ]);
                  case 2 : 
                      Npmlog.error(label, "Invalid JSON", metadata(result[0], result[1]));
                      return Promise.resolve(undefined);
                  case 3 : 
                      Npmlog.error(label, "Bad response", metadata(result[0], result[1]));
                      return Promise.resolve(undefined);
                  case 4 : 
                      Npmlog.error(label, "Bad URL", {
                            producer: row[/* owner */0],
                            url: result[0]
                          });
                      return Promise.resolve(undefined);
                  case 5 : 
                      Npmlog.error(label, "Timed out", metadata(result[0], result[1]));
                      return Promise.resolve(undefined);
                  case 6 : 
                      Npmlog.error(label, "Unreachable", metadata(result[0], result[1]));
                      return Promise.resolve(undefined);
                  case 7 : 
                      Npmlog.error(label, "Unknown error", {
                            producer: row[/* owner */0],
                            url: result[0],
                            error: result[1]
                          });
                      return Promise.resolve(undefined);
                  
                }
              }));
}

EosBp_Fetch$ReactTemplate.tableRows(httpEndpoint, undefined, /* () */0).then((function (response) {
            var rows = Js_option.getWithDefault(/* array */[], EosBp_Fetch$ReactTemplate.Response[/* getData */2](response));
            console.log("got table rows", rows.length);
            return Promise.all(rows.map(fetchBpJson));
          })).then((function (results) {
          return Promise.all(results.map((function (result) {
                            if (result !== undefined) {
                              var match = result;
                              return writeBpJson(match[0], match[1], match[2]);
                            } else {
                              return Promise.resolve(/* () */0);
                            }
                          })));
        })).then((function () {
        Npmlog.info("", "Done", Env$ReactTemplate.buildDir);
        return Promise.resolve(/* () */0);
      }));

var Log = 0;

exports.Log = Log;
exports.httpEndpoint = httpEndpoint;
exports.writeBpJson = writeBpJson;
exports.fetchBpJson = fetchBpJson;
/*  Not a pure module */
