// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Eos = require("@sagan-software/bs-eos/src/Eos.js");
var Url = require("url");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Eosio = require("@sagan-software/bs-eos/src/Eosio.js");
var Eosjs = require("eosjs");
var Json5 = require("json5");
var Helmet = require("@sagan-software/bs-react-helmet/src/Helmet.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Mkdirp = require("mkdirp");
var Npmlog = require("npmlog");
var Process = require("process");
var Eos_Types = require("@sagan-software/bs-eos/src/Eos_Types.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Eosio_System = require("@sagan-software/bs-eos/src/Eosio_System.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReactHelmet = require("react-helmet");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Server = require("react-dom/server");
var App$ReactTemplate = require("../src/App.js");
var Env$ReactTemplate = require("../src/Env.js");
var Request$ReactTemplate = require("../src/Request.js");
var EosBp_Json$ReactTemplate = require("../src/EosBp_Json.js");
var BignumberJs = require("bignumber.js/bignumber.js");

((process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0'));

var BadUrl = Caml_exceptions.create("Fetch_json-ReactTemplate.BadUrl");

function fetchWithUrl(url, method__, body, $staropt$star, _) {
  var timeout = $staropt$star !== undefined ? $staropt$star : 5000;
  var urlStr = url.toString();
  return Request$ReactTemplate.make(urlStr, method__, false, body, timeout, undefined, undefined, /* () */0).then((function (res) {
                return Promise.resolve(/* record */[
                            /* requestUrl */urlStr,
                            /* responseUrl */res.request.uri.href,
                            /* statusCode */res.statusCode,
                            /* statusText */res.statusMessage,
                            /* contentType */Request$ReactTemplate.header(res, "Content-Type"),
                            /* text */res.body
                          ]);
              }));
}

function fetchWithBase(baseUrl, path, method__, body, timeout, _) {
  var exit = 0;
  var url;
  try {
    url = new Url.URL(path, baseUrl);
    exit = 1;
  }
  catch (_error){
    return Promise.reject([
                BadUrl,
                baseUrl
              ]);
  }
  if (exit === 1) {
    return fetchWithUrl(url, method__, body, timeout, /* () */0);
  }
  
}

function fetch(url, method__, body, timeout, _) {
  var exit = 0;
  var url$1;
  try {
    url$1 = new Url.URL(url);
    exit = 1;
  }
  catch (_error){
    return Promise.reject([
                BadUrl,
                url
              ]);
  }
  if (exit === 1) {
    return fetchWithUrl(url$1, method__, body, timeout, /* () */0);
  }
  
}

function decodeAsResult(decoder, json) {
  var exit = 0;
  var decoded;
  try {
    decoded = Curry._1(decoder, json);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Json_decode.DecodeError) {
      return /* Error */Block.__(1, [exn[1]]);
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Ok */Block.__(0, [decoded]);
  }
  
}

function parseData(decoder, text) {
  var exit = 0;
  var json;
  try {
    json = JSON.parse(text);
    exit = 1;
  }
  catch (_error){
    var json$1 = Json5.parse(text);
    return /* record */[
            /* json */json$1,
            /* isJson5 */false,
            /* decoded */decodeAsResult(decoder, json$1)
          ];
  }
  if (exit === 1) {
    return /* record */[
            /* json */json,
            /* isJson5 */false,
            /* decoded */decodeAsResult(decoder, json)
          ];
  }
  
}

var InvalidJson = Caml_exceptions.create("Fetch_json-ReactTemplate.InvalidJson");

function thenDecode(decoder, promise) {
  return promise.then((function (response) {
                var exit = 0;
                var data;
                try {
                  data = parseData(decoder, response[/* text */5]);
                  exit = 1;
                }
                catch (exn){
                  return Promise.reject([
                              InvalidJson,
                              response
                            ]);
                }
                if (exit === 1) {
                  return Promise.resolve(/* tuple */[
                              response,
                              data
                            ]);
                }
                
              }));
}

var DecodeError = Caml_exceptions.create("Fetch_json-ReactTemplate.DecodeError");

function requireDecoded(promise) {
  return promise.then((function (param) {
                var data = param[1];
                var response = param[0];
                var match = data[/* decoded */2];
                if (match.tag) {
                  return Promise.reject([
                              DecodeError,
                              response,
                              match[0]
                            ]);
                } else {
                  return Promise.resolve(/* tuple */[
                              response,
                              data,
                              match[0]
                            ]);
                }
              }));
}

var httpEndpoint = "http://api.eosnewyork.io";

var eos = Eos.make(httpEndpoint, undefined, undefined, undefined, undefined, undefined, undefined, /* () */0);

function tableRows(lowerBound, _) {
  return Curry._6(Eosio.getProducers(eos), undefined, undefined, lowerBound, undefined, 100, /* () */0).then((function (table) {
                var total = table[/* rows */0].length;
                var more = table[/* more */1];
                Npmlog.info("regproducer", "total=" + (String(total) + (" more=" + (String(more) + ""))), "");
                if (more) {
                  var lastIndex = table[/* rows */0].length - 1 | 0;
                  var lastRow = Belt_Array.get(table[/* rows */0], lastIndex);
                  if (lastRow !== undefined) {
                    var nextLowerBound = new BignumberJs(Eosjs.modules.format.encodeName(Eos_Types.AccountName[/* toString */4](lastRow[/* owner */0]), false)).plus(1).toString();
                    return tableRows(nextLowerBound, /* () */0).then((function (t2) {
                                  return Promise.resolve(/* record */[
                                              /* rows */t2[/* rows */0].concat(table[/* rows */0]),
                                              /* more */t2[/* more */1]
                                            ]);
                                }));
                  } else {
                    return Promise.resolve(table);
                  }
                } else {
                  return Promise.resolve(table);
                }
              }));
}

function bpJsonRaw(row) {
  var match = row[/* url */4].replace((/\W/g), "").trim().length > 0;
  if (match) {
    var url = EosBp_Json$ReactTemplate.getUrl(row[/* url */4]);
    return fetch(url, undefined, undefined, undefined, /* () */0);
  } else {
    return Promise.reject([
                BadUrl,
                row[/* url */4]
              ]);
  }
}

function bpJson(row) {
  return thenDecode(EosBp_Json$ReactTemplate.decode, bpJsonRaw(row));
}

function producerDir(row) {
  return Path.join(Env$ReactTemplate.buildDir, Eos_Types.AccountName[/* toString */4](row[/* owner */0]));
}

function writeProducerFile(row, filename, contents, mode) {
  var dirname = producerDir(row);
  var fullpath = Path.join(dirname, filename);
  Mkdirp.sync(dirname);
  Fs.writeFileSync(fullpath, contents, (function () {
            switch (mode) {
              case 5194459 : 
                  return "hex";
              case -844212943 : 
                  return "utf8";
              case 640502097 : 
                  return "ascii";
              case -714733139 : 
                  return "latin1";
              case -718799473 : 
                  return "base64";
              case -845055443 : 
                  return "ucs2";
              case -718799473 : 
                  return "base64";
              case -317998079 : 
                  return "binary";
              case 1042356549 : 
                  return "utf16le";
              
            }
          })());
  Npmlog.info("write", filename, Path.relative(Process.cwd(), fullpath));
  return Promise.resolve(/* () */0);
}

function writeBpJson(param) {
  var row = param[2];
  var writeBpRawJson = writeProducerFile(row, "bp-raw.json", param[0][/* text */5], /* utf8 */-844212943);
  var writeBpJson$1 = writeProducerFile(row, "bp.json", JSON.stringify(param[1][/* json */0], null, 2), /* utf8 */-844212943);
  return Promise.all(/* tuple */[
              writeBpRawJson,
              writeBpJson$1
            ]);
}

function chunks(size, originalArr) {
  var results = /* array */[];
  var arr = originalArr.slice();
  while(arr.length > 0) {
    var chunk = arr.splice(0, size);
    results.push(chunk);
  };
  return results;
}

function allChunked(arr, fn, chunkSize) {
  return chunks(chunkSize, arr).reduce((function (promise, chunk) {
                return promise.then((function (allResults) {
                              return Promise.all(chunk.map(Curry.__1(fn))).then((function (results) {
                                            return Promise.resolve(results.concat(allResults));
                                          }));
                            }));
              }), Promise.resolve(/* array */[]));
}

var Unreachable = Caml_exceptions.create("Fetch_json-ReactTemplate.Unreachable");

var BadResponse = Caml_exceptions.create("Fetch_json-ReactTemplate.BadResponse");

var BadStatus = Caml_exceptions.create("Fetch_json-ReactTemplate.BadStatus");

function handleBpJsonError(match) {
  if (Caml_exceptions.isCamlExceptionOrOpenVariant(match)) {
    if (match[0] === BadUrl) {
      return "Bad URL: \"" + (String(match[1]) + "\"");
    } else if (match[0] === BadStatus) {
      var match$1 = match[1];
      return "Bad status: " + (String(match$1[/* statusCode */2]) + (" (" + (String(match$1[/* statusText */3]) + (") at " + (String(match$1[/* responseUrl */1]) + "")))));
    } else if (match[0] === Request$ReactTemplate.TimedOut) {
      return "Timed out: " + (String(match[1]) + " ");
    } else {
      return undefined;
    }
  }
  
}

function fetchBpJson(row) {
  return thenDecode(EosBp_Json$ReactTemplate.decode, bpJsonRaw(row)).then((function (param) {
                  var response = param[0];
                  if (200 <= response[/* statusCode */2] && response[/* statusCode */2] < 400) {
                    Npmlog.info("bp.json", Eos_Types.AccountName[/* toString */4](row[/* owner */0]), response[/* responseUrl */1]);
                    return Promise.resolve(/* tuple */[
                                response,
                                param[1],
                                row
                              ]);
                  } else {
                    return Promise.reject([
                                BadStatus,
                                response
                              ]);
                  }
                })).catch((function (error) {
                var match = handleBpJsonError(error);
                if (match !== undefined) {
                  Npmlog.error("bp.json", Eos_Types.AccountName[/* toString */4](row[/* owner */0]), match);
                }
                return Promise.resolve(undefined);
              }));
}

function withoutNone(optsArray) {
  return optsArray.reduce((function (results, item) {
                if (item !== undefined) {
                  results.push(Js_primitive.valFromOption(item));
                }
                return results;
              }), /* array */[]);
}

function fetchBpJsonFiles(table) {
  Npmlog.info("regproducer", "total", table[/* rows */0].length);
  return allChunked(table[/* rows */0], fetchBpJson, 25).then((function (responses) {
                  return Promise.resolve(withoutNone(responses));
                })).then((function (responses) {
                return Promise.resolve(/* tuple */[
                            table[/* rows */0],
                            responses
                          ]);
              }));
}

function writeBpJsonFiles(param) {
  var responses = param[1];
  var rows = param[0];
  var numRows = rows.length;
  var numResponses = responses.length;
  Npmlog.info("fetch done", "Got " + (String(numResponses) + (" OK responses of " + (String(numRows) + " producers"))), "");
  return allChunked(responses, writeBpJson, 10).then((function () {
                return Promise.resolve(/* tuple */[
                            rows,
                            responses
                          ]);
              }));
}

function renderHtml(element) {
  var content = Server.renderToString(element);
  var helmet = ReactHelmet.Helmet.renderStatic();
  var bodyAttributes = Helmet.toString(helmet.bodyAttributes);
  var htmlAttributes = Helmet.toString(helmet.htmlAttributes);
  var style = Helmet.toString(helmet.style);
  var title = Helmet.toString(helmet.title);
  var meta = Helmet.toString(helmet.meta);
  var script = Helmet.toString(helmet.script);
  return "<!DOCTYPE html>\n    <html " + (String(htmlAttributes) + (">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\">\n        " + (String(title) + ("\n        " + (String(meta) + ("\n        " + (String(style) + ("\n      </head>\n    <body " + (String(bodyAttributes) + (">\n      <div id=\"app\">" + (String(content) + ("</div>\n      <script src=\"/index.js\"></script>\n      " + (String(script) + "\n    </body>\n    </html>\n  ")))))))))))));
}

function imageExtension(contentType) {
  if (contentType.startsWith("image/svg")) {
    return ".svg";
  } else if (contentType.startsWith("image/png")) {
    return ".png";
  } else if (contentType.startsWith("image/jpeg")) {
    return ".jpg";
  } else {
    return undefined;
  }
}

function fetchImage(row, basename, url) {
  var url$1 = Js_option.getWithDefault("", url).trim().replace((/^[^\x00-\x7F]/g), "").replace((/[^\x00-\x7F]$/g), "").replace((/\/$/g), "");
  if (url$1.length === 0) {
    return Promise.resolve(/* () */0);
  } else {
    var match = url$1.startsWith("http") || url$1.startsWith("https");
    var url$2 = match ? url$1 : "http://" + url$1;
    return Request$ReactTemplate.make(url$2, undefined, undefined, undefined, 15000, undefined, null, /* () */0).then((function (res) {
                    var contentType = Js_option.getWithDefault("?", Request$ReactTemplate.header(res, "content-type"));
                    var match = imageExtension(contentType);
                    if (match !== undefined) {
                      var filename = basename + match;
                      return writeProducerFile(row, filename, res.body, /* binary */-317998079);
                    } else {
                      return Promise.resolve(/* () */0);
                    }
                  })).catch((function (error) {
                  var match = handleBpJsonError(error);
                  if (match !== undefined) {
                    Npmlog.error("image", Eos_Types.AccountName[/* toString */4](row[/* owner */0]), match);
                  }
                  return Promise.resolve(/* () */0);
                }));
  }
}

function fetchImages(row, json) {
  return Js_option.getWithDefault(Promise.resolve(/* array */[]), Js_option.map((function (branding) {
                    return Promise.all(/* array */[
                                fetchImage(row, "logo_256", branding[/* logo256 */0]),
                                fetchImage(row, "logo_1024", branding[/* logo1024 */1]),
                                fetchImage(row, "logo", branding[/* logoSvg */2])
                              ]);
                  }), json[/* org */2][/* branding */6]));
}

function fetchAllImages(param) {
  var responses = param[1];
  var rows = param[0];
  return allChunked(responses.map((function (param) {
                      var match = param[1][/* decoded */2];
                      if (match.tag) {
                        return Promise.resolve(/* array */[]);
                      } else {
                        return fetchImages(param[2], match[0]);
                      }
                    })), (function (p) {
                  return p;
                }), 5).then((function () {
                return Promise.resolve(/* tuple */[
                            rows,
                            responses
                          ]);
              }));
}

function generateHtmlFile(route, dirname) {
  var element = ReasonReact.element(undefined, undefined, App$ReactTemplate.make(route, /* array */[]));
  var html = renderHtml(element);
  var fullpath = Path.join(dirname, "index.html");
  Mkdirp.sync(dirname);
  Fs.writeFileSync(fullpath, html, "utf8");
  Npmlog.info("write", "html", Path.relative(Process.cwd(), fullpath));
  return Promise.resolve(/* () */0);
}

function generateProducerHtmlFile(row) {
  return generateHtmlFile(/* Producer */[Eos_Types.AccountName[/* toString */4](row[/* owner */0])], producerDir(row));
}

function generateProducerHtmlFiles(param) {
  var responses = param[1];
  var rows = param[0];
  return allChunked(rows, generateProducerHtmlFile, 10).then((function () {
                return Promise.resolve(/* tuple */[
                            rows,
                            responses
                          ]);
              }));
}

function generateProducerReport(producer, globalState) {
  var estimatedRewards = Eosio_System.estimateProducerPay(producer, globalState);
  return Promise.resolve(/* tuple */[
              producer,
              estimatedRewards
            ]);
}

function generateProducerReports(param) {
  var responses = param[1];
  var rows = param[0];
  return Curry._2(Eosio.getGlobalState(eos), undefined, /* () */0).then((function (globalState) {
                  if (globalState !== undefined) {
                    var globalState$1 = globalState;
                    return Promise.all(Belt_Array.map(rows, (function (r) {
                                        return generateProducerReport(r, globalState$1);
                                      }))).then((function (results) {
                                  return Promise.resolve(Belt_Array.forEach(results.sort((function (param, param$1) {
                                                        var match = param[1].gt(param$1[1]);
                                                        if (match) {
                                                          return 1;
                                                        } else {
                                                          return -1;
                                                        }
                                                      })), (function (param) {
                                                    Npmlog.info("rewards", Eos_Types.AccountName[/* toString */4](param[0][/* owner */0]), Eosjs.modules.format.printAsset(Eos_Types.Asset[/* fromBigNumber */0](param[1], 4, "EOS")));
                                                    return /* () */0;
                                                  })));
                                }));
                  } else {
                    Npmlog.error("reports", "No global state found in the eosio.system contract", "");
                    return Promise.resolve(/* () */0);
                  }
                })).then((function () {
                return Promise.resolve(/* tuple */[
                            rows,
                            responses
                          ]);
              }));
}

tableRows(undefined, /* () */0).then(fetchBpJsonFiles).then(writeBpJsonFiles).then(generateProducerHtmlFiles).then(fetchAllImages).then(generateProducerReports).then((function () {
          Npmlog.info("", "Done", Env$ReactTemplate.buildDir);
          return Promise.resolve(/* () */0);
        })).catch((function (error) {
        Npmlog.error("err", "", error);
        return Promise.resolve(/* () */0);
      }));

var Log = 0;

exports.Log = Log;
exports.BadUrl = BadUrl;
exports.fetchWithUrl = fetchWithUrl;
exports.fetchWithBase = fetchWithBase;
exports.fetch = fetch;
exports.decodeAsResult = decodeAsResult;
exports.parseData = parseData;
exports.InvalidJson = InvalidJson;
exports.thenDecode = thenDecode;
exports.DecodeError = DecodeError;
exports.requireDecoded = requireDecoded;
exports.httpEndpoint = httpEndpoint;
exports.eos = eos;
exports.tableRows = tableRows;
exports.bpJsonRaw = bpJsonRaw;
exports.bpJson = bpJson;
exports.producerDir = producerDir;
exports.writeProducerFile = writeProducerFile;
exports.writeBpJson = writeBpJson;
exports.chunks = chunks;
exports.allChunked = allChunked;
exports.Unreachable = Unreachable;
exports.BadResponse = BadResponse;
exports.BadStatus = BadStatus;
exports.handleBpJsonError = handleBpJsonError;
exports.fetchBpJson = fetchBpJson;
exports.withoutNone = withoutNone;
exports.fetchBpJsonFiles = fetchBpJsonFiles;
exports.writeBpJsonFiles = writeBpJsonFiles;
exports.renderHtml = renderHtml;
exports.imageExtension = imageExtension;
exports.fetchImage = fetchImage;
exports.fetchImages = fetchImages;
exports.fetchAllImages = fetchAllImages;
exports.generateHtmlFile = generateHtmlFile;
exports.generateProducerHtmlFile = generateProducerHtmlFile;
exports.generateProducerHtmlFiles = generateProducerHtmlFiles;
exports.generateProducerReport = generateProducerReport;
exports.generateProducerReports = generateProducerReports;
/*  Not a pure module */
